plugins {
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'com.diffplug.gradle.spotless' version '3.28.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    compile group: 'org.bitcoinj', name: 'bitcoinj-core', version: '0.15.8'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    compile 'com.google.guava:guava:28.2-jre'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            // repository(url: "file://${buildDir}/repo") {}

            // repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
            //    authentication(userName: '', password: '')
            // }

            //   snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
            //      authentication(userName: ossrhUsername, password: ossrhPassword)
            //  }

            pom.project {
                groupId = 'org.arkecosystem'
                version = '1.2.9'
                artifactId = 'crypto'

                name = 'java-crypto'
                description = 'A Simple Cryptography Implementation in Java for the ARK CORE Blockchain Framework.'
                url = 'https://sdk.ark.dev/java/crypto'
                inceptionYear = '2018'

                licenses {
                    license {
                        name = 'MIT'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        name = 'Kovač Žan'
                        email = 'zan@ark.io'
                        organization = 'ARK Ecosystem'
                        organizationUrl = 'https://ark.io'
                    }
                    developer {
                        name = 'Kristjan Košič'
                        email = 'kristjan@ark.io'
                        organization = 'ARK Ecosystem'
                        organizationUrl = 'https://ark.io'
                    }
                    developer {
                        name = 'Brian Faust'
                        email = 'brian@ark.io'
                        organization = 'ARK Ecosystem'
                        organizationUrl = 'https://ark.io'
                    }
                    developer {
                        name = 'Joshua Noack'
                        email = 'joshua@ark.io'
                        organization = 'ARK Ecosystem'
                        organizationUrl = 'https://ark.io'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/ArkEcosystem/java-crypto.git'
                    developerConnection = 'scm:git:ssh://github.com:ArkEcosystem/java-crypto.git'
                    url = 'https://github.com/ArkEcosystem/java-crypto/tree/1.2.8'
                }
            }
        }
    }
}

if (project.hasProperty("signing.keyId")) {
    apply plugin: 'signing'
    signing {
        sign configurations.archives
    }
}

test {
    useJUnitPlatform()
    failFast = true
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

spotless {
    java {
        target fileTree(projectDir) {
            include 'src/main/**/*.java'
            include 'src/test/**/*.java'
            exclude '**/build/**'
        }
        googleJavaFormat('1.1').aosp()
    }
}

task formatCode(dependsOn: ['spotlessApply'])

task fatJar(type: Jar) {
    manifest.from jar.manifest
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

build.dependsOn 'spotlessApply'

wrapper {
    gradleVersion = '6.2.0'
}
